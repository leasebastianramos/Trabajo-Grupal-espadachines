from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
import doctest

COLOR = "#79c4ae"
FUENTE=("Calibri",14) #se pueden cambiar

def Ventana_inicio_sesion():
    Raiz_vent=Tk()
    Raiz_vent.title("Iniciar sesion ")
    Raiz_vent.resizable(0,0)
    Raiz_vent.iconbitmap("espadachines.ico")   #se puede cambir
    Raiz_vent.geometry("350x450")


    frame_opciones=Frame(Raiz_vent,width=350,height=450)
    frame_opciones.pack()
    frame_opciones.config(bg=COLOR)
    frame_opciones.config(bd=15,relief="groove")  #se  puede  cambiar

    Text_iniciar=Label(frame_opciones, text="Iniciar sesión",font= (FUENTE[0],22),bg=COLOR)
    Text_iniciar.place(x=85,y=20)

    #Boton para ir a la ventana de crear usuario
    registrar=Button(frame_opciones,text="¿No tenes cuenta? Registrate ",font= (FUENTE[0],12),foreground= "blue",background=COLOR,bd=0,command= lambda:registrar_usuario())
    registrar.place(x=60,y=60)


    #estos son elementos esteticos

    Text_usuario_pordefcto=StringVar(value="Nombre de usuario")
    Text_usuario_pordefcto_top=Label(frame_opciones,font= (FUENTE[0],12),textvariable=Text_usuario_pordefcto,background=COLOR,foreground=COLOR)
    Text_usuario_pordefcto_top.place(x=60,y=120)


    #aca quedarian los datos que ponga el usuario
    variable_usuario=StringVar()


    entry_usuario=Entry(frame_opciones, relief=SUNKEN,font=(FUENTE[0],12), bd=2,width=20,textvariable=Text_usuario_pordefcto)  
    entry_usuario.place(x=60,y=140)

    #estas funciones son eventos para darle dinamismo
    entry_usuario.bind("<FocusIn>",lambda X : entry_focus_in(entry_usuario,Text_usuario_pordefcto,variable_usuario,Text_usuario_pordefcto_top)) 
    entry_usuario.bind("<FocusOut>",lambda X : entry_focus_out(entry_usuario,Text_usuario_pordefcto,Text_usuario_pordefcto_top))



    Text_contraseña_pordefcto=StringVar(value="Contraseña") 
    Text_contraseña_pordefcto_top=Label(frame_opciones,font= (FUENTE[0],12),textvariable=Text_contraseña_pordefcto,background=COLOR,foreground=COLOR)
    Text_contraseña_pordefcto_top.place(x=60,y=180)

    variable_contraseña=StringVar()

    entry_contraseña=Entry(frame_opciones, relief=SUNKEN,font=(FUENTE[0],12), bd=2,width=20,textvariable=Text_contraseña_pordefcto)
    entry_contraseña.place(x=60,y=200)

    entry_contraseña.bind("<FocusIn>",lambda X : entry_focus_in(entry_contraseña,Text_contraseña_pordefcto,variable_contraseña,Text_contraseña_pordefcto_top,control.get())) 
    entry_contraseña.bind("<FocusOut>",lambda X : entry_focus_out(entry_contraseña,Text_contraseña_pordefcto,Text_contraseña_pordefcto_top))


    #Para mostrar la contraseña si el usuario lo
    control=IntVar()
    mostrar=Checkbutton(frame_opciones,text="mostrar",variable=control,background=COLOR,command=lambda:mostrar_contraseña(control,entry_contraseña,Text_contraseña_pordefcto.get())) 
    mostrar.place(x=230,y=200)


    #boton para llamar a la  ventana recuperar contraseña
    recuperar=Button(frame_opciones,text="¿Olvidaste tu contraseña?",font= (FUENTE[0],10),background=COLOR,foreground= "blue",bd=0, command= lambda:"")
    recuperar.place(x=60,y=240)

    #boton para iniciar la sesion

    iniciar=Button(frame_opciones,text="Iniciar sesion",font=(FUENTE[0],10),anchor=CENTER,padx=40,bg="blue",foreground="white",command= lambda:"")  #El color se puede cambiar
    iniciar.place(x=60,y=320)

    """advertencia_usuario=Text(frame_opciones,font=(FUENTE[0],12),background=COLOR,foreground="red",width=20, height=2,bd=0,state=DISABLED)   
    advertencia_usuario.place(x=20,y=130)"""

    Raiz_vent.mainloop()

def entry_focus_in(entry,text_pordefecto,variable_para_usar,text_pordefecto_top,control_contraseña=99):
    if entry.get()==text_pordefecto.get():
        entry.config(textvariable=variable_para_usar)
        text_pordefecto_top.config(foreground="Black")

    if control_contraseña==0:
        entry.config(show="*")


def entry_focus_out(entry,text_pordefecto,text_pordefecto_top):
    if entry.get()=="":
        entry.config(textvariable=text_pordefecto,show="")
        text_pordefecto_top.config(foreground=COLOR)

def mostrar_contraseña(control,contraseña,text_pordefecto_contraseña):
    if contraseña.get()!=text_pordefecto_contraseña:

        if control.get()==0:
            contraseña.config(show="*")
        else: 
            contraseña.config(show="")




def registrar_usuario():
    Raiz_ventana= Toplevel()
    Raiz_ventana.title("Registrar usuario")
    Raiz_ventana.resizable(0,0)
    Raiz_ventana.iconbitmap("espadachines.ico")
    Raiz_ventana.geometry("550x450")

    frame_opciones=Frame(Raiz_ventana,width=600, height=450)
    frame_opciones.pack()
    frame_opciones.config(bg=COLOR)
    frame_opciones.config(bd=15,relief="groove")


    Text_registrar=Label(frame_opciones, text="Registrar usuario",font= (FUENTE[0],22),bg=COLOR)
    Text_registrar.place(x=160,y=20)


    Text_usuario_pordefcto=StringVar(value="Nombre de usuario")
    Text_usuario_pordefcto_top=Label(frame_opciones,font= (FUENTE[0],12),textvariable=Text_usuario_pordefcto,background=COLOR,foreground=COLOR)
    Text_usuario_pordefcto_top.place(x=60,y=70)



    variable_usuario=StringVar()


    entry_usuario=Entry(frame_opciones, relief=SUNKEN,font=(FUENTE[0],12), bd=2,width=20,textvariable=Text_usuario_pordefcto)  
    entry_usuario.place(x=60,y=90)
    #entry_usuario.bind("Enter", lambda )

    entry_usuario.bind("<FocusIn>",lambda X : entry_focus_in(entry_usuario,Text_usuario_pordefcto,variable_usuario,Text_usuario_pordefcto_top)) 
    entry_usuario.bind("<FocusOut>",lambda X : entry_focus_out(entry_usuario,Text_usuario_pordefcto,Text_usuario_pordefcto_top))

    advertencia_usuario=Text(frame_opciones,font=(FUENTE[0],10),background=COLOR,foreground="red",width=20, height=2,bd=0,state=DISABLED)   
    advertencia_usuario.place(x=60,y=120)


    Text_contraseña_pordefcto=StringVar(value="Contraseña") 
    Text_contraseña_pordefcto_top=Label(frame_opciones,font= (FUENTE[0],12),textvariable=Text_contraseña_pordefcto,background=COLOR,foreground=COLOR)
    Text_contraseña_pordefcto_top.place(x=60,y=160)

    variable_contraseña=StringVar()

    entry_contraseña=Entry(frame_opciones, relief=SUNKEN,font=(FUENTE[0],12), bd=2,width=20,textvariable=Text_contraseña_pordefcto)
    entry_contraseña.place(x=60,y=180)

    entry_contraseña.bind("<FocusIn>",lambda X : entry_focus_in(entry_contraseña,Text_contraseña_pordefcto,variable_contraseña,Text_contraseña_pordefcto_top,control.get())) 
    entry_contraseña.bind("<FocusOut>",lambda X : entry_focus_out(entry_contraseña,Text_contraseña_pordefcto,Text_contraseña_pordefcto_top))

    control=IntVar()
    mostrar=Checkbutton(frame_opciones,text="mostrar",variable=control,background=COLOR,command=lambda:mostrar_contraseña_confirmacion(control,entry_contraseña,Text_contraseña_pordefcto.get(),confirmar_contraseña,Texto_confirmar_pordecto.get())) 
    mostrar.place(x=240,y=180)

    advertencia_contraseña=Text(frame_opciones,font=(FUENTE[0],10),foreground="red",background=COLOR,width=20, height=2,bd=0,state=DISABLED)   
    advertencia_contraseña.place(x=60,y=210)

    Texto_confirmar_pordecto=StringVar(value="Confirmar")
    Texto_confirmar_pordecto_top=Label(frame_opciones,font= (FUENTE[0],12),textvariable=Texto_confirmar_pordecto,background=COLOR,foreground=COLOR)
    Texto_confirmar_pordecto_top.place(x=60,y=250)

    variable_r_confirmar=StringVar()

    confirmar_contraseña=Entry(frame_opciones, relief=SUNKEN,font=(FUENTE[0],12), bd=2,width=20,textvariable=Texto_confirmar_pordecto) 
    confirmar_contraseña.place(x=60,y=270)
    confirmar_contraseña.bind("<FocusIn>",lambda X : entry_focus_in(confirmar_contraseña,Texto_confirmar_pordecto,variable_r_confirmar,Texto_confirmar_pordecto_top,control.get())) 
    confirmar_contraseña.bind("<FocusOut>",lambda X : entry_focus_out(confirmar_contraseña,Texto_confirmar_pordecto,Texto_confirmar_pordecto_top))

    advertencia_confirmar=Text(frame_opciones,font=(FUENTE[0],10),background=COLOR,foreground="red",width=20,height=1,bd=0,state=DISABLED)
    advertencia_confirmar.place(x=60,y=300)


    valor=StringVar()
    valor.set("Recuperar contraseña")
    list_preguntas=["Apellido de su abuela materna"
                    ,"Nombre de tu mascota"
                    ,"Nombre de tu mejor amigo/a"
                    ,"Cantante preferido"
                    ,"Ciudad preferida"
                    ,"opcion 6"
                    ,"opcion 7"
                    ,"opcion 8"
                    ,"opcion 9"
                    ,"opcion 10"]
    
    entry_recuperar=Entry(frame_opciones, relief=SUNKEN,font=(FUENTE[0],12), bd=2,width=20,state=DISABLED)
    entry_recuperar.place(x=280,y=130)

    recuperar_contraseña=OptionMenu(frame_opciones,valor,*list_preguntas,command=lambda x:destapar_entry(entry_recuperar))
    recuperar_contraseña.place(x=280,y=90)


    registrar=Button(frame_opciones,text="Registrar",font=(FUENTE[0],12),anchor=CENTER,bg="blue",foreground="white",padx=20,command= lambda:enviar_crear_usuario(entry_usuario,entry_contraseña,confirmar_contraseña,advertencia_usuario,advertencia_contraseña,advertencia_confirmar))
    registrar.place(x=160,y=350)



def destapar_entry(entry):
        entry.config(state=NORMAL)


def mostrar_contraseña_confirmacion(control,contraseña,Texto_pordecto_contra,confirmar,Texto_pordecto_confirmar):
    if contraseña.get()!=Texto_pordecto_contra:

        if control.get()==0:
            contraseña.config(show="*")
        else: 
            contraseña.config(show="")
    
    if  confirmar.get()!=Texto_pordecto_confirmar:
        if control.get()==0:
            confirmar.config(show="*")
        else: 
            confirmar.config(show="")



def enviar_crear_usuario(user,pasword,confirmar,advertencia_usuario,advertencia_contraseña,advertencia_confirmar): 

    usuario_validado=validar_usuario(user.get())                                                                    
    contraseña_validada=validar_contraseña(pasword.get())

    advertencia_usuario.config(state=NORMAL)
    advertencia_contraseña.config(state=NORMAL)
    advertencia_confirmar.config(state=NORMAL)

    advertencia_usuario.delete(1.0, END)
    advertencia_contraseña.delete(1.0, END)
    advertencia_confirmar.delete(1.0, END)

    if usuario_validado!=True:
        advertencia_usuario.insert(END,usuario_validado)
        advertencia_usuario.config(state=DISABLED)
    """else:
        user.config(foreground="green")"""

    if contraseña_validada!=True:
        advertencia_contraseña.insert(END,contraseña_validada)
        advertencia_contraseña.config(state=DISABLED)
    """else:
        pasword.config(foreground="green")"""


    if pasword.get()!=confirmar.get():
        advertencia_confirmar.insert(END,"No coinciden")
        advertencia_confirmar.config(state=DISABLED)
    """else:
        confirmar.config(foreground="green")"""

    if contraseña_validada==True and usuario_validado==True:  #queda raro pero como concidera el "no vacio" como True tengo que ponerlo asi
        if pasword.get()==confirmar.get():
            messagebox.showinfo("Carga de datos","Los datos fueron validados y recibidos")
   


def validar_usuario(usuario):
    #la variable usuario debe ser un str, devuelve una advertencia para mostrar al usuario o True en caso de estar validada
    """
    >>> validar_usuario("Lucas97*###")
    'Solo se permiten letras(a-z),numeros(0-9) y “_” “-” “.” '
    >>> validar_usuario("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
    'Se excedio el limite de caracteres(15)'
    >>> validar_usuario("Iña")
    'Usa como minimo 5 caracteres'
    >>> validar_usuario("Iñaki12345")
    True
    >>> validar_usuario("Iñaki")
    True
    """
    caracteres_validos=["_","-","."]
    if 5<=len(usuario)<=15:
        i=0
        respuesta=True

        while respuesta==True and i<len(usuario):  #le puse respuesta==True por que quiero que pare cuando respuesta es un texto 
            if not usuario[i].isalnum() and not usuario[i] in caracteres_validos:
                respuesta="Usa letras(a-z),numeros\n(0-9) o “_” “-” “.” " 

            else:
                i+=1
    else:
        if 15<len(usuario):
            respuesta="Se excedio el limite de\ncaracteres(15)"   
        else:
            respuesta="Usa como minimo 5\n caracteres"

    return respuesta
    
def validar_contraseña(contraseña):
    #la variable contraseña debe ser un str, devuelve una advertencia para mostrar al usuario o True en caso de estar validada
    """
    >>> validar_contraseña("a1")
    'Usa como minimo 4 caracteres'
    >>> validar_contraseña("aaaaaaaaaaaaaaa")
    'Se excedio el limite de caracteres(8)'
    >>> validar_contraseña("aaaa")
    'No puede haber caracteres repetidos adyacentes'
    >>> validar_contraseña("abcd")
    'Debe contener por lo menos una mayuscula'
    >>> validar_contraseña("ABCD")
    'Debe contener por lo menos una minuscula'
    >>> validar_contraseña("Abcd")
    'Debe contener por lo menos un numero'
    >>> validar_contraseña("Abcd91")
    'Debe contener por lo menor uno de estos caracteres “_” “-” “#” “*”'
    >>> validar_contraseña("Abcd91#")
    True
    >>> validar_contraseña("Alg#rit7")
    True
    >>> validar_contraseña("Abcd_#99")
    'No puede haber caracteres repetidos adyacentes'
    """
    if 4<=len(contraseña)<=8:

        Caracteres_solicitados=["_","-",".","#","*"]

        mayusculas=False
        minusculas=False
        num=False
        caracteres=False

        respuesta=True
        i=0

        while respuesta==True and i<len(contraseña):

            if  i <len(contraseña)-1 and contraseña[i]==contraseña[i+1]:
                respuesta="No uses caracteres\nrepetidos adyacentes"

            elif contraseña[i] in Caracteres_solicitados:
                caracteres=True
            elif contraseña[i].isalpha():   
                if contraseña[i].islower():
                    minusculas=True
                else:
                    mayusculas=True
            elif contraseña[i].isnumeric():
                num=True
            else:
                respuesta="Alguno de los caracteres\nno fue reconocido"
            i+=1
        if respuesta==True and not ( mayusculas and minusculas and num and caracteres):
            respuesta=procesar_respuesta(mayusculas,minusculas,num,caracteres)
    else:
        if len(contraseña)<4:
            respuesta="Usa como minimo\n4 caracteres"
        else:
            respuesta="Se excedio el limite de\n caracteres(8)" 
    return respuesta
    	
def procesar_respuesta(mayusculas,minusculas,num,caracteres):
    """esta funcion no te da una devolucion super larga con todo lo que te equivocaste, si te equivocaste en varios campos te da una devolucion parcial """    

    if not mayusculas:
        devolucion="Debe contener una\n mayuscula"
    elif not minusculas:
        devolucion="Debe contener una\n minuscula"
    elif not num:
        devolucion="Debe contener un numero"
    elif not caracteres:
        devolucion="Debe contener estos\ncaracteres “_” “-” “#” “*”"
        
    return devolucion
  
Ventana_inicio_sesion()
